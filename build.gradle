plugins {
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"
}

group 'ch.uzh.ifi.hase'
version '1.0.0'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

// Only needed if you use 'developmentOnly' or a custom 'runtimeClasspath'
configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

springBoot {
    mainClass.set('ch.uzh.ifi.hase.soprafs24.Application')
}

dependencies {
    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

    // PostgreSQL
    implementation 'org.postgresql:postgresql:42.6.0'
    runtimeOnly 'org.postgresql:postgresql:42.6.0'

    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Hibernate Spatial + JTS
    implementation 'org.locationtech.jts:jts-core:1.19.0'
    implementation 'org.hibernate:hibernate-spatial:6.4.4.Final'
    implementation 'org.locationtech.jts.io:jts-io-common:1.19.0'
    implementation 'org.n52.jackson:jackson-datatype-jts:1.2.10'

    // Devtools (optional, for reloading in dev)
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Testing
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'

    // JPA annotations (Jakarta)
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
}



bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

sonar {
    properties {
        property "sonar.projectKey", "KimSchlup_tripster-server"
        property "sonar.organization", "soprafs25group08"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    maxParallelForks = 1
}

// Optional local.properties loader (if you need to set local overrides in a file).
File secretPropsFile = file('./local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
}

// Default tasks
defaultTasks 'bootJar', 'build'
