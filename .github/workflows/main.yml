name: Deploy Project to App Engine

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: Test and Sonarqube
    runs-on: ubuntu-latest

    # Add environment variables for database connection
    env:
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/mapmates_dev
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: mapmates123

    # Add PostgreSQL service container
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: mapmates123
          POSTGRES_DB: mapmates_dev
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Install Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Test and analyze
        run: ./gradlew test jacocoTestReport sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    name: Deploying to Google Cloud
    runs-on: ubuntu-latest

    # Setup environment variables so application.yml can setup the datasource
    env:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://${{ secrets.PROD_DB_HOST }}:${{ secrets.PROD_DB_PORT }}/${{ secrets.PROD_DB_NAME }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.PROD_DB_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}

    # needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Deploy to App Engine
        id: deploy
        uses: google-github-actions/deploy-appengine@v0.2.0
        with:
          deliverables: app.yaml
          version: v1
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials: ${{ secrets.GCP_SERVICE_CREDENTIALS }}

      - name: Test
        run: curl "${{ steps.deploy.outputs.url }}"
