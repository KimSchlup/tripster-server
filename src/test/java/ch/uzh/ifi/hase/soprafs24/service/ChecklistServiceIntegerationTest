package ch.uzh.ifi.hase.soprafs24.service;

import ch.uzh.ifi.hase.soprafs24.constant.UserStatus;
import ch.uzh.ifi.hase.soprafs24.entity.User;
import ch.uzh.ifi.hase.soprafs24.entity.Roadtrip;
import ch.uzh.ifi.hase.soprafs24.repository.UserRepository;
import ch.uzh.ifi.hase.soprafs24.repository.ChecklistRepository;
import ch.uzh.ifi.hase.soprafs24.repository.ChecklistElementRepository;
import ch.uzh.ifi.hase.soprafs24.repository.RoadtripRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.http.HttpStatus;

import static org.junit.jupiter.api.Assertions.*;



/**
 * Test class for the UserResource REST resource.
 *
 * @see UserService
 */
@WebAppConfiguration
@SpringBootTest
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
public class UserServiceIntegrationTest {

    @Qualifier("userRepository")
    @Autowired
    private UserRepository userRepository;

    @Qualifier("userRepository")
    @Autowired
    private ChecklistRepository checklistRepository;

    @Qualifier("userRepository")
    @Autowired
    private ChecklistElementRepository checklistElementRepository;

    @Qualifier("roadtripRepository")
    @Autowired
    private RoadtripRepository roadtripRepository;

    @Autowired
    private UserService userService;

    @Autowired
    private RoadtripService roadtripService;

    @Autowired
    private ChecklistService checklistService;

    @BeforeEach
    public void setup() {
        checklistElementRepository.deleteAll();
        checklistRepository.deleteAll();
        roadtripRepository.deleteAll();
    }

    @Test
    public void getChecklistByRoadtripId_success() {

        Roadtrip testTrip = new Roadtrip();
        testTrip.setName("testName");
        roadtripService.createRoadtrip(testTrip);

        Long roadtripId = testTrip.getRoadtripId();

        // when
        Roadtrip fetchedTrip = checklistService.getChecklistByRoadtripId(rodtripId);

        // then
        assertEquals(testTrip.getName(), fetchedTrip.getName());
    }

    @Test
    public void getChecklistByRoadtripId_fail() {

        Roadtrip testTrip = new Roadtrip();
        testTrip.setName("testName");
        roadtripService.createRoadtrip(testTrip);

        Long nonExistingId = 999L


        // when and then
        ResponseStatusException exception = assertThrows(ResponseStatusException.class, () -> {
            checklistService.getChecklistByRoadtripId(nonExistingId);
        });

        // Verify the exception status and message
        assertEquals(HttpStatus.NOT_FOUND, exception.getStatusCode());
        assertEquals("Checklist not found for this roadtrip", exception.getReason());
    }

    @Test
    public void getChecklistByRoadtripId_success() {

        Roadtrip testTrip = new Roadtrip();
        testTrip.setName("testName");
        roadtripService.createRoadtrip(testTrip);

        Long roadtripId = testTrip.getRoadtripId();

        // when
        Roadtrip fetchedTrip = checklistService.getChecklistByRoadtripId(rodtripId);

        // then
        assertEquals(testTrip.getName(), fetchedTrip.getName());
    }
}